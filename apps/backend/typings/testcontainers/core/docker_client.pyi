"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import Any, Optional, TYPE_CHECKING, TypeVar, Union
from docker.models.containers import Container
from docker.models.images import Image
from typing_extensions import ParamSpec
from testcontainers.core.auth import DockerAuthInfo
from testcontainers.core.config import ConnectionMode
from docker.models.networks import Network as DockerNetwork

if TYPE_CHECKING:
    ...
LOGGER = ...
_P = ParamSpec("_P")
_T = TypeVar("_T")
class DockerClient:
    """
    Thin wrapper around :class:`docker.DockerClient` for a more functional interface.
    """
    def __init__(self, **kwargs: Any) -> None:
        ...
    
    @_wrapped_container_collection
    def run(self, image: str, command: Optional[Union[str, list[str]]] = ..., environment: Optional[dict[str, str]] = ..., ports: Optional[dict[int, Optional[int]]] = ..., labels: Optional[dict[str, str]] = ..., detach: bool = ..., stdout: bool = ..., stderr: bool = ..., remove: bool = ..., **kwargs: Any) -> Container:
        ...
    
    @_wrapped_image_collection
    def build(self, path: str, tag: Optional[str], rm: bool = ..., **kwargs: Any) -> tuple[Image, Iterable[dict[str, Any]]]:
        """
        Build a Docker image from a directory containing the Dockerfile.

        :return: A tuple containing the image object and the build logs.
        """
        ...
    
    def find_host_network(self) -> Optional[str]:
        """
        Try to find the docker host network.

        :return: The network name if found, None if not set.
        """
        ...
    
    def port(self, container_id: str, port: int) -> str:
        """
        Lookup the public-facing port that is NAT-ed to :code:`port`.
        """
        ...
    
    def get_container(self, container_id: str) -> dict[str, Any]:
        """
        Get the container with a given identifier.
        """
        ...
    
    def bridge_ip(self, container_id: str) -> str:
        """
        Get the bridge ip address for a container.
        """
        ...
    
    def network_name(self, container_id: str) -> str:
        """
        Get the name of the network this container runs on
        """
        ...
    
    def gateway_ip(self, container_id: str) -> str:
        """
        Get the gateway ip address for a container.
        """
        ...
    
    def get_connection_mode(self) -> ConnectionMode:
        """
        Determine the connection mode.

        See https://github.com/testcontainers/testcontainers-python/issues/475#issuecomment-2407250970
        """
        ...
    
    def host(self) -> str:
        """
        Get the hostname or ip address of the docker host.
        """
        ...
    
    def login(self, auth_config: DockerAuthInfo) -> None:
        """
        Login to a docker registry using the given auth config.
        """
        ...
    
    def client_networks_create(self, name: str, param: dict[str, Any]) -> DockerNetwork:
        ...
    


def get_docker_host() -> Optional[str]:
    ...

def get_docker_auth_config() -> Optional[str]:
    ...

